#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
var app = require('../app');
var debug = require('debug')('psl-app-back:server');
var http = require('http');
var OS = require('os');
const cpus = OS.cpus();
// var https = require('https');
// var fs = require('fs');

// var options = {
//   key: fs.readFileSync('./certs/key.pem'),
//   cert: fs.readFileSync('./certs/cert.pem')
// };

const getNetworkAddress = () => {
  for (const interfaceDetails of Object.values(OS.networkInterfaces())) {
    if (!interfaceDetails) continue;

    for (const details of interfaceDetails) {
      const { address, family, internal } = details;

      if (family === 'IPv4' && !internal) return address;
    }
  }
};

/**
 * displays number of available CPU cores for threadpooling
 */
console.log("# of CPU cores ", cpus.length);
process.env.UV_THREADPOOL_SIZE = cpus.length;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = process.env.NODE_ENV === "production"
//   ? https.createServer(
//     options,
//     app)
//   : http.createServer(app);

var server = http.createServer(app);

const getServerDetails = () => {
  // Make sure to close the server once the process ends.

  // Once the server has started, get the address the server is running on
  // and return it.
  const details = server.address();
  let local;
  let network;
  const previous = port;
  if (typeof details === 'string') {
    local = details;
  } else if (typeof details === 'object' && details.port) {
    // According to https://www.ietf.org/rfc/rfc2732.txt, IPv6 addresses
    // should be surrounded by square brackets (only the address, not the
    // port).
    let address;
    if (details.address === '::') address = 'localhost';
    else if (details.family === 'IPv6') address = `[${details.address}]`;
    else address = details.address;
    const ip = getNetworkAddress();

    // const protocol = useSsl ? 'https' : 'http';
    const protocol = process.env.NODE_ENV === 'production' ? 'https' : 'http';
    local = `${protocol}://${address}:${details.port}`;
    network = ip ? `${protocol}://${ip}:${details.port}` : undefined;
  }

  return {
    local,
    network,
    previous,
  };
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`server running on port ${port}
local ip: ${getServerDetails().local}
network ip: ${getServerDetails().network}`));
server.on('error', onError);
server.on('listening', onListening);
// server.once('request', (req) => { console.log(req); });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  // console.log(server);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
